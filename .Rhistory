'Unknown method',fixed=TRUE)
#------------------------------------------------------
## Generating data point on the Sphere
## "rejvmf"
size <- 100
rho <- 0.8
mu <- c(1,0,0)
pkbd_dat <- rpkb(size, mu = mu, rho = rho, method = "rejvmf")
expect_equal(dim(pkbd_dat$x),c(size,length(mu)))
expect_true(is.matrix(pkbd_dat$x))
expect_equal(rowSums(pkbd_dat$x^2), rep(1,size))
## "rejacg"
size <- 100
rho <- 0.8
mu <- c(1,0,0)
pkbd_dat <- rpkb(size, mu = mu, rho = rho, method = "rejacg")
expect_equal(dim(pkbd_dat$x),c(size,length(mu)))
expect_true(is.matrix(pkbd_dat$x))
expect_equal(rowSums(pkbd_dat$x^2), rep(1,size))
pkbd_dat <- rpkb(size, mu = mu, rho = rho, method = "rejacg", max.iter=20)
expect_less_than(pkbd_dat$beta$iter, 20)
expect_lt(pkbd_dat$beta$iter, 20)
pkbd_dat$beta
pkbd_dat
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
## "rejacg"
size <- 100
rho <- 0.8
mu <- c(1,0,0)
pkbd_dat <- rpkb(size, mu = mu, rho = rho, method = "rejacg")
expect_equal(dim(pkbd_dat$x),c(size,length(mu)))
expect_true(is.matrix(pkbd_dat$x))
expect_equal(rowSums(pkbd_dat$x^2), rep(1,size))
pkbd_dat <- rpkb(size, mu = mu, rho = rho, method = "rejacg", max.iter=20)
expect_lt(pkbd_dat$beta$iter, 20)
pkbd_dat <- rpkb(size, mu = mu, rho = rho, method = "rejacg", tol.eps=1e-7)
expect_less_than(1e-7, pkbd_dat$beta$estim.prec)
expect_lt(1e-7, pkbd_dat$beta$estim.prec)
devtools::build_manual()
library(QuadratiK)
library(QuadratiK)
#------------------------------------------------------
## Test numerical values
rho <- 0.8
mu <- c(1,0,0)
den <- dpkb(mu, mu, rho)
den <- dpkb(matrix(mu,nrow=1), mu, rho)
den
dpkb(matrix(mu,nrow=1), mu, 1)
dpkb(matrix(mu,nrow=1), mu, .5)
1-.5^2
sum(mu*mu)
mu%*%mu
dpkb(matrix(mu,nrow=1), mu, 0)
2*pi^(3/2)*lgamma(3/2)^(-1)
1/(2*pi^(3/2)*lgamma(3/2)^(-1))
lgamma(3/2)
gamma(3/2)
1/(2*pi^(3/2)*gamma(3/2)^(-1))
# For rho=0 the density corresponds to the normalizing constant for d
expect_equal(as.numeric(dpkb(matrix(mu,nrow=1), mu, rho=0)), 0.07957747)
#'
#'
#' @srrstats {G5.1, G5.5} data sets are generated using simple functions with
#'                        fixed seed
#' @srrstats {G5.2,G5.2a,G5.2b} all the error and warning messages are tested
#' @srrstats {G5.4,G5.4a} correctness tested on simple cases
#' @srrstats {G5.8, G5.8a,G5.8b,G5.8c} edge conditions
#' @srrstats {PD4.0} numeric outputs are tested
#'
#' @noRd
library(testthat)
# For rho=0 the density corresponds to the normalizing constant for d
expect_equal(as.numeric(dpkb(matrix(mu,nrow=1), mu, rho=0)), 0.07957747)
as.numeric(dpkb(matrix(mu,nrow=1), mu, rho=0))
# For rho=0 the density corresponds to the normalizing constant for d
expect_equal(round(as.numeric(dpkb(matrix(mu,nrow=1), mu, rho=0)),7), 0.07957747)
# For rho=0 the density corresponds to the normalizing constant for d
expect_equal(round(as.numeric(dpkb(matrix(mu,nrow=1), mu, rho=0)),8), 0.07957747)
x <- matrix(rnorm(3),nrow=1)
# For rho=0 the density corresponds to the normalizing constant for d
expect_equal(round(as.numeric(dpkb(x, mu, rho=0)),8), 0.07957747)
dpkb(matric(mu,nrow=1), mu, rho=0))
dpkb(matric(mu,nrow=1), mu, rho=0)
dpkb(matrix(mu,nrow=1), mu, rho=0)
dpkb(matrix(mu,nrow=1), mu, rho=0.5
)
round(as.numeric(dpkb(matrix(mu,nrow=1), mu, rho=0.5)),8)
round(as.numeric(dpkb(matrix(mu,nrow=1), mu, rho=0.5)),10)
# For x = mu the product of x*mu =1 in the poisson density. The remaining depends only on rho and d
expect_equal(round(as.numeric(dpkb(matrix(mu,nrow=1), mu, rho=0.5)),10), 0.4774648)
# For x = mu the product of x*mu =1 in the poisson density. The remaining depends only on rho and d
expect_equal(round(as.numeric(dpkb(matrix(mu,nrow=1), mu, rho=0.5)),10), 0.47746483)
# For x = mu the product of x*mu =1 in the poisson density. The remaining depends only on rho and d
expect_equal(as.numeric(dpkb(matrix(mu,nrow=1), mu, rho=0.5)), 0.47746483)
round(as.numeric(dpkb(x, mu, rho=0)),8)
round(as.numeric(dpkb(x, mu, rho=0)),10)
# For rho=0 the density corresponds to the normalizing constant for d independently of x
expect_equal(round(as.numeric(dpkb(x, mu, rho=0)),10), 0.07957747)
# For rho=0 the density corresponds to the normalizing constant for d independently of x
expect_equal(round(as.numeric(dpkb(x, mu, rho=0)),8), 0.07957747)
d=3
# For rho=0 the density corresponds to the normalizing constant for d independently of x
expect_equal(as.numeric(dpkb(x, mu, rho=0)), 1/(2*pi^(d/2)*gamma(d/2)))
# For rho=0 the density corresponds to the normalizing constant for d independently of x
expect_equal(as.numeric(dpkb(x, mu, rho=0)), 1/(2*pi^(d/2)*gamma(d/2)^(-1)))
1/(2*pi^(d/2)*gamma(d/2)^(-1))
as.numeric(dpkb(x, mu, rho=0))
pi
expect_equal(as.numeric(dpkb(matrix(mu,nrow=1), mu, rho=0.5, logdens = TRUE)), log(0.47746483))
rho <- 0.8
mu <- c(1,0,0)
size = 1000
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
x
#------------------------------------------------------
## Test numerical values
rho <- 0.9
mu <- c(1,0,0)
size = 1000
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
expect_lt(max(colMeans(x)-mu),1e-4)
#------------------------------------------------------
## Test numerical values
rho <- 0.9
mu <- c(1,0,0)
size = 1000
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
expect_lt(max(colMeans(x)-mu),1e-4)
expect_lt(max(colMeans(x$x)-mu),1e-4)
expect_lt(max(colMeans(x$x)-mu),1e-3)
max(colMeans(x$x)-mu)
colMeans(x$x)-mu
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
# For rho=0 the density corresponds to the normalizing constant for d independently of x
expect_equal(as.numeric(dpkb(x, mu, rho=0)), 1/(2*pi^(d/2)*gamma(d/2)^(-1)))
colMeans(x$x)-mu
abs(colMeans(x$x)-mu)
max(abs(colMeans(x$x)-mu))
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
size = 100
#------------------------------------------------------
## Test numerical values
rho <- 0.9
mu <- c(1,0,0)
size = 100
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = 0.95, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-4)
x <- rpkb(size, mu = mu, rho = 0.95, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-4)
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
max(abs(colMeans(x$x)-mu))
#------------------------------------------------------
## Test numerical values
rho <- 0.9
mu <- rnorm(3)
mu <- mu/sum(mu)
size = 100
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
x
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.95, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
rho <- 0.9
mu <- rnorm(3)
mu <- mu/sum(mu)
size = 100
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
#------------------------------------------------------
## Test numerical values
rho <- 0.9
mu <- rnorm(3)
mu <- mu/sum(mu)
size = 100
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
mu
x
mu <- rnorm(3)
mu
mu <- mu/sum(mu)
mu
mu <- mu/sum(mu^2)
mu <- rnorm(3)
mu <- mu/sum(mu^2)
mu
sum(mu^2)
mu <- rnorm(3)
mu
mu^2
sum(mu^2)
mu <- mu/sum(mu^2)
mu
sum(mu^2)
mu <- rnorm(3)
mu <- mu/sqrt(sum(mu^2))
sum(mu^2)
size = 100
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = 0.95, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
max(abs(colMeans(x$x)-mu))
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-3)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
x <- rpkb(size, mu = mu, rho = rho, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
expect_lt(max(abs(colMeans(x$x)-mu)),1e-1)
x <- rpkb(size, mu = mu, rho = 0.99, method = "rejpsaw")
# Test if the mean of generated points is close to the true mean
# higher rho, less variability
expect_lt(max(abs(colMeans(x$x)-mu)),1e-2)
roxygen2::roxygenize()
devtools::document()
devtools::document()
roxygen2::roxygenize()
