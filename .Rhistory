library(pkgcheck)
pkgcheck("/Users/sarac/Documents/GitHub/QuadratiK-package")
pkgcheck("/Users/sarac/Documents/GitHub/QuadratiK-package/")
setwd("./..")
install.packages("pkgstats")
install.packages("pkgstats")
library (pkgstats)
Sys.setenv ("GITHUB_TOKEN" = "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")
library (pkgcheck)
mydir <- file.path (tempdir (), "srr-demo")
mydit
mydir
x <- pkgcheck("/Users/sarac/Documents/GitHub/QuadratiK-package")
x <- pkgcheck("C:\\Users\\sarac\\Documents\\GitHub/QuadratiK-package")
summary(x)
library(goodpractice)
g <- gp("C:\\Users\\sarac\\Documents\\GitHub/QuadratiK-package")
library(codemetar)
codemetar::write_codemeta("/Users/sarac/Documents/GitHub/QuadratiK-package")
print(x)
x <- pkgcheck("C:\\Users\\sarac\\Documents\\GitHub/QuadratiK-package")
summary(x)
usethis::use_agpl3_license()
setwd("QuadratiK-package/")
usethis::use_agpl3_license()
usethis::use_tidy_description()
x <- pkgcheck("C:\\Users\\sarac\\Documents\\GitHub/QuadratiK-package")
x <- pkgcheck("C:\\Users\\sarac\\Documents\\GitHub/QuadratiK-package")
usethis::use_gpl_license()
usethis::use_gpl_license()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
x <- pkgcheck("C:\\Users\\sarac\\Documents\\GitHub/QuadratiK-package")
usethis::use_github_links()
usethis::use_github_links(overwrite = TRUE)
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package")
usethis::use_github_links(overwrite = TRUE)
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package/")
roxygen2::roxygenise()
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package/")
summary(x)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenize()
devtools::document()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::build_manual()
roxygen2::roxygenize()
devtools::document()
devtools::document()
roxygen2::roxygenize()
devtools::load_all()
roxygen2::roxygenize()
devtools::document()
devtools::load_all()
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package/")
summary(x)
covr::package_coverage()
usethis::use_appveyor()
usethis::use_github_action()
usethis::use_github_action()
usethis::use_github_action()
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package/")
summary(x)
library (pkgcheck)
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package/")
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package")
summary(x)
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package")
summary(x)
usethis::use_github_action_check_full()
usethis::use_github_action("check-full")
usethis::use_github_links()
usethis::use_github_links(overwrite=TRUE)
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package")
library(pkgcheck)
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package")
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package/")
summary(x)
size <- 100
rho=0.8
mu = c(1,0,0)
pkbd_dat <- rpkb(size, mu = mu, rho = rho, method = "rejvmf")
library(QuadratiK)
size <- 100
rho=0.8
mu = c(1,0,0)
pkbd_dat <- rpkb(size, mu = mu, rho = rho, method = "rejvmf")
den <- dpkb(pkbd_dat$x, mu, rho)
expect_equal(dim(den),c(size,1))
library(testthat)
expect_equal(dim(den),c(size,1))
expect_false(any(den<0))
any(den<0)
#------------------------------------------------------
## Generating data point on the Sphere
## and computing the densities
size <- 100
d = 3
x_sp <- sample_hypersphere(d, size)
expect_equal(dim(den),c(size,d))
expect_equal(dim(x_sp),c(size,d))
x_sp/rowSums(x_sp^2)
rowSum(x_sp/rowSums(x_sp^2))
rowSums(x_sp/rowSums(x_sp^2))
rowSums(x_sp^2)
expect_true(any(rowSums(x_sp^2) ==1))
any(rowSums(x_sp^2) ==1)
roxygen2::roxygenize()
devtools::document()
library(pkgcheck)
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package/")
summary(x)
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package/", goodpractice = FALSE)
summary(x)
library(covr)
report()
coverage <- package_coverage()
zero_coverage(coverage)
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package/")
library(pkgcheck)
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package/")
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package")
summary(x)
size <- 100
groups<-c(rep(1, size), rep(2, size),rep(3,size))
rho=0.8
data1<-rpkb(size, c(1,0,0),rho,method='rejvmf')
library(QuadratiK)
size <- 100
groups<-c(rep(1, size), rep(2, size),rep(3,size))
rho=0.8
data1<-rpkb(size, c(1,0,0),rho,method='rejvmf')
data2<-rpkb(size, c(0,1,0),rho,method='rejacg')
data3<-rpkb(size, c(-1,0,0),rho,method='rejpsaw')
dat<-rbind(data1$x,data2$x, data3$x)Ã¹
size <- 100
groups<-c(rep(1, size), rep(2, size),rep(3,size))
rho=0.8
data1<-rpkb(size, c(1,0,0),rho,method='rejvmf')
data2<-rpkb(size, c(0,1,0),rho,method='rejacg')
data3<-rpkb(size, c(-1,0,0),rho,method='rejpsaw')
dat<-rbind(data1$x,data2$x, data3$x)
# Assuming your function is named 'my_clustering_function'
# and it returns a list with a specific structure.
result <- pkbc(dat, nClust = 3)
expect_s4_class(result, "pkbc")
library(testthat)
expect_s4_class(result, "pkbc")
expect_true(all(result@res_k$postProbs >= 0 & result@res_k$postProbs <= 1))
expect_is(result@res_k$LogLik, "numeric")
result@res_k$LogLik
result@res_k$postProbs >= 0 & result@res_k$postProbs <= 1)
result@res_k$postProbs >= 0 & result@res_k$postProbs <= 1
result@res_k$postProbs >= 0 & result@res_k$postProbs <= 1
result@res_k[[3]]$LogLik
expect_is(result@res_k[[3]]$LogLik, "numeric")
class(result@res_k[[3]]$LogLik)
expect_type(result@res_k[[3]]$LogLik, "numeric")
type(result@res_k[[3]]$LogLik)
is.numeric(result@res_k[[3]]$LogLik)
typeof(result@res_k[[3]]$LogLik)
expect_type(result@res_k[[3]]$LogLik, "double")
result_loglik <- pkbc(dat, nClust = 3, stoppingRule = 'loglik')
result_max <- pkbc(dat, nClust = 3, stoppingRule = 'max')
expect_not_equal(result_loglik@res_k[[3]]$LogLik, result_max@res_k[[3]]$LogLik)
library(testthat)
expect_not_equal(result_loglik@res_k[[3]]$LogLik, result_max@res_k[[3]]$LogLik)
expect_error(pkbc(dat, nClust = 3, stoppingRule = 'prova'))
x <- pkgcheck("C:/Users/sarac/Documents/GitHub/QuadratiK-package")
summary(x)
