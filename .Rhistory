## Generating data point on the Sphere
## and computing the densities
size <- 100
d <- 3
x_sp <- sample_hypersphere(d, size)
expect_equal(dim(x_sp),c(size,d))
expect_true(any(rowSums(x_sp^2) ==1))
})
#' Test for select_h
#'
#'
#' @srrstats {G5.2,G5.2a,G5.2b} all the error and warning messages are tested
#' @srrstats {G5.5} random seed
#' @noRd
library(testthat)
# Test 1: Verify Error on Invalid Input
test_that("Error on invalid method input", {
set.seed(123)
expect_error(select_h(x = matrix(rnorm(100), ncol = 2),
alternative = "invalid"),
"The alternative argument should be one of 'location', 'scale' or
'skewness'", fixed=TRUE)
# x is not numeric
expect_error(select_h(x = "invalid", alternative="skewness"),
"x must be numeric", fixed=TRUE)
x <- matrix(rnorm(100), ncol = 2)
y <- matrix(rnorm(90), ncol = 3)
expect_error(select_h(x, y, alternative="skewness"),
"'x' and 'y' must have the same number of columns.",
fixed=TRUE)
x <- matrix(rnorm(100), ncol = 2)
y <- rep(c(1,2), each=20)
expect_error(select_h(x, y, alternative="skewness"),
"'x' and 'y' must have the same number of rows.", fixed=TRUE)
y <- rep(c(1,2), each=25)
expect_error(select_h(x, y, alternative="skewness", delta_dim=c(1,2,1)),
"delta_dim must be 1 or a numeric vector of length equal to the
number of columns of pooled.", fixed=TRUE)
})
## # Test 1: test for select_h
test_that("Select h", {
set.seed(123)
# normality
result <- select_h(x = matrix(rnorm(20),ncol=2), alternative="location")
expect_equal(class(result$h_sel), "numeric")
expect_equal(class(result$power), "data.frame")
# two-sample
result <- select_h(x = matrix(rnorm(20),ncol=2),
y = matrix(rnorm(20),ncol=2), alternative="skewness")
expect_equal(class(result$h_sel), "numeric")
expect_equal(class(result$power), "data.frame")
# k-sample
result <- select_h(x = matrix(rnorm(30),ncol=2), y = rep(c(1,2,3),each=5),
alternative="scale")
expect_equal(class(result$h_sel), "numeric")
expect_equal(class(result$power), "data.frame")
})
# Test 1: Test for summary_stat
test_that("summary_stat test", {
# dimension = 2
dat<-rbind(matrix(rnorm(50),ncol=2),
matrix(rnorm(50,4),ncol=2),
matrix(rnorm(50,2),ncol=2))
y <- rep(c(1,2,3),each=25)
pkbd_res<- pkbc(dat, c(2,3))
expect_error(summary_stat(pkbd_res, 4),
"The provided pkbc object does not contain results for the requested
number of clusters")
res1 <- summary_stat(pkbd_res, 3, true_label = NULL)
res2 <- summary_stat(pkbd_res, 3, true_label = y)
expect_equal(length(res1$metrics), 2)
expect_equal(length(res2$metrics), 2)
# dimension = 3
dat<-rbind(matrix(rnorm(60),ncol=3),
matrix(rnorm(60,4),ncol=3),
matrix(rnorm(60,2),ncol=3))
y <- rep(c(1,2,3),each=20)
pkbd_res<- pkbc(dat, c(2,3))
res1 <- summary_stat(pkbd_res, 2, true_label = NULL)
res2 <- summary_stat(pkbd_res, 3, true_label = y)
expect_equal(length(res1$metrics), 3)
expect_equal(length(res2$metrics), 3)
# dimension = 4
dat<-rbind(matrix(rnorm(60),ncol=4),
matrix(rnorm(60,4),ncol=4),
matrix(rnorm(60,2),ncol=4))
y <- rep(c(1,2,3),each=15)
pkbd_res<- pkbc(dat, c(2,3))
res1 <- summary_stat(pkbd_res, 2, true_label = NULL)
res2 <- summary_stat(pkbd_res, 3, true_label = y)
expect_equal(length(res1$metrics), 4)
expect_equal(length(res2$metrics), 4)
})
# Test 1: Test for true.labels
test_that("Clustering algorithm works", {
dat<-rbind(matrix(rnorm(50),ncol=2), matrix(rnorm(50,4),ncol=2))
y <- rep(c(1,2),each=25)
val1 <- validation(pkbc(dat, 2), true_label = NULL, elbow.plot = FALSE)
expect_equal(nrow(val1$metrics),5)
expect_null(val1$elbow)
expect_equal(length(val1$IGP), 2)
val2 <- validation(pkbc(dat, c(2,3,4)), true_label = y, elbow.plot = TRUE)
expect_equal(nrow(val2$metrics),8)
expect_equal(length(val2$IGP), 4)
})
library(srr)
srr_stats_roxygen()
x
roxygen2::roxygenise()
install.packages("pkgdown")
usethis::use_pkgdown()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
a <- list("1","2")
is.vector(a)
true_label <- list("1","2")
(is.factor(true_label) | is.vector(true_label)) &!is.list(true_label)
!is.list(true_label)
true_label <- factor("1","2")
true_label
true_label <- factor(rep(c("1","2"),5))
true_label
is.vector(true_label)
is.factor(true_label)
true_label <- as.factor(as.numeric(true_label))
A <-matrix(c(1,2,3,4),nrow=2)
is.numeric(A)
a <- 3
is.vector(a)
is.vector(A)
a <- data.frame(c(1,NaN))
a
b <- as.matrix(a)
b
is.numeric(b)
a <- data.frame(c(1,inf))
a <- data.frame(c(1,Inf))
a
b <- as.matrix(a)
is.numeric(b)
b
?any
roxygen2::roxygenise()
devtools::build_vignettes()
devtools::document()
devtools::document()
roxygen2::roxygenise()
debug(roxygen2::roxygenise())
roxygen2::roxygenise()
devtools::check()
remove.packages("QuadratiK")
devtools::check()
roxygen2::roxygenise()
val1 <- validation(pkbc(dat, 2), true_label = NULL, elbow.plot = FALSE)
dat<-rbind(matrix(rnorm(50),ncol=2), matrix(rnorm(50,4),ncol=2))
y <- rep(c(1,2),each=25)
val1 <- validation(pkbc(dat, 2), true_label = NULL, elbow.plot = FALSE)
expect_equal(nrow(val1$metrics),5)
library(testthat)
expect_equal(nrow(val1$metrics),5)
expect_null(val1$elbow)
expect_equal(length(val1$IGP), 2)
val2 <- validation(pkbc(dat, c(2,3,4)), true_label = y, elbow.plot = TRUE)
expect_equal(nrow(val2$metrics),8)
expect_equal(length(val2$IGP), 4)
# dimension = 2
dat<-rbind(matrix(rnorm(50),ncol=2),
matrix(rnorm(50,4),ncol=2),
matrix(rnorm(50,2),ncol=2))
y <- rep(c(1,2,3),each=25)
pkbd_res<- pkbc(dat, c(2,3))
expect_error(summary_stat(pkbd_res, 4),
"The provided pkbc object does not contain results for the requested
number of clusters")
res1 <- summary_stat(pkbd_res, 3, true_label = NULL)
res2 <- summary_stat(pkbd_res, 3, true_label = y)
expect_equal(length(res1$metrics), 2)
expect_equal(length(res2$metrics), 2)
# dimension = 3
dat<-rbind(matrix(rnorm(60),ncol=3),
matrix(rnorm(60,4),ncol=3),
matrix(rnorm(60,2),ncol=3))
y <- rep(c(1,2,3),each=20)
pkbd_res<- pkbc(dat, c(2,3))
res1 <- summary_stat(pkbd_res, 2, true_label = NULL)
res2 <- summary_stat(pkbd_res, 3, true_label = y)
expect_equal(length(res1$metrics), 3)
expect_equal(length(res2$metrics), 3)
# dimension = 4
dat<-rbind(matrix(rnorm(60),ncol=4),
matrix(rnorm(60,4),ncol=4),
matrix(rnorm(60,2),ncol=4))
y <- rep(c(1,2,3),each=15)
pkbd_res<- pkbc(dat, c(2,3))
res1 <- summary_stat(pkbd_res, 2, true_label = NULL)
expect_equal(length(res1$metrics), 4)
res2 <- summary_stat(pkbd_res, 3, true_label = y)
expect_equal(length(res2$metrics), 4)
devtools::build_vignettes()
devtools::build_manual()
devtools::load_all()
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenise()
library(pkgcheck)
x <- pkgcheck()
x <- pkgcheck()
summary(x)
x
roxygen2::roxygenise()
roxygen2::roxygenise()
library(pkgcheck)
x <- pkgcheck()
x <- pkgcheck()
summary(x)
x
library(autotest)
b <- autotest_package()
library(srr)
srr_stats_pre_submit()
srr_report()
roxygen2::roxygenise()
size<-100
groups<-c(rep(1, size), rep(2, size),rep(3,size))
rho<-0.8
set.seed(081423)
data1<-rpkb(size, c(1,0,0),rho,method="rejvmf")
library(QuadratiK)
size<-100
groups<-c(rep(1, size), rep(2, size),rep(3,size))
rho<-0.8
set.seed(081423)
data1<-rpkb(size, c(1,0,0),rho,method="rejvmf")
data2<-rpkb(size, c(0,1,0),rho,method="rejvmf")
data3<-rpkb(size, c(0,0,1),rho,method="rejvmf")
dat<-rbind(data1$x,data2$x, data3$x)
pkbd<- pkbc(dat, 3)
pkbd@res_k
pkbd@res_k[[3]]$finalMemb
table(pkbd@res_k[[3]]$finalMemb)
library(srr)
srr_report()
srr_stats_pre_submit()
roxygen2::roxygenise()
devtools::document()
devtools::load_all()
remove.packages("QuadratiK")
devtools::build_manual()
library(autotest)
library(pkgcheck)
auto_test_package()
roxygen2::roxygenise()
library(pkgcheck)
library(autotest)
library(QuadratiK)
autotest::autotest_package()
x <- pkgcheck::pkgcheck()
x <- pkgcheck::pkgcheck()
summary(x)
x
roxygen2::roxygenise()
rlang::last_trace()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
dat <- rbind(matrix(rnorm(200),ncol=2),matrix(rnorm(200,3),ncol=2),matrix(rnorm(200,6),ncol=2))
devtools::build_vignettes()
devtools::build_vignettes()
head(wireless)
wire <- wireless[,-8]
labels <- wireless[,8]
wire_norm <- wire/sqrt(rowSums(wire^2))
set.seed(2468)
res_pk <- pkbc(as.matrix(wire_norm),3:6)
print(res_pk)
summary(res_pk)
plot(res_pk)
extract_stats(res_pk)
extract_stats(res_pk, 4)
library(mclust)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
dat <- rbind(matrix(rnorm(200),ncol=2),matrix(rnorm(200,3),ncol=2),matrix(rnorm(200,6),ncol=2))
dim(dat)
res <- pkbc(dat,c(2:4))
roxygen2::roxygenise()
devtools::load_all()
res <- pkbc(dat,c(2:4))
newdat <- rbind(matrix(rnorm(20),ncol=2),matrix(rnorm(20,3),ncol=2),matrix(rnorm(20,6),ncol=2))
predict(pkbc,3,newdat)
roxygen2::roxygenise()
devtools::load_all()
predict(pkbc,3,newdat)
predict(res,3,newdat)
debug(predict)
predict(res,3,newdat)
roxygen2::roxygenise()
devtools::load_all()
predict(res,3,newdat)
undebug(predict)
predict(res,3,newdat)
predict(res,4,newdat)
predict(res,1,newdat)
predict(res,2,newdat)
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all()
predict(res,2)
?QuadratiK::plot
roxygen2::roxygenise()
devtools::load_all()
plot(res)
roxygen2::roxygenise()
devtools::load_all()
plot(res)
show(res)
source("~/GitHub/QuadratiK-package/R/clustering_functions.R")
roxygen2::roxygenise()
devtools::load_all()
show(res)
roxygen2::roxygenise()
devtools::load_all()
dat <- rbind(matrix(rnorm(200),ncol=2),matrix(rnorm(200,3),ncol=2),matrix(rnorm(200,6),ncol=2))
res <- pkbc(dat,c(2:4))
show(res)
print(res)
summary(res)
predict(res,3)
newdat <- rbind(matrix(rnorm(20),ncol=2),matrix(rnorm(20,3),ncol=2),matrix(rnorm(20,6),ncol=2))
predict(res,3,newdat)
plot(res)
extract_stats(res)
extract_stats(res,3)
roxygen2::roxygenise()
devtools::load_all()
plot(res)
show(res)
summary(res)
extract_stats(res,3)
predict(res,3,newdat)
predict(res,3)
plot(res)
show(res)
summary(res)
predict(res,3,newdat)
predict(res,3)
plot(res)
?QuadratiK::plot
?summary.pkbc
?QuadratiK::summary
devtools::load_all()
devtools::load_all()
roxygen2::roxygenise()
?QuadratiK::summary
?QuadratiK::estract_stats
library(QuadratiK)
?QuadratiK::estract_stats
?QuadratiK::extract_stats
?QuadratiK::pkbc
roxygen2::roxygenise()
devtools::load_all()
?QuadratiK::summary
?QuadratiK::summary
roxygen2::roxygenise()
?QuadratiK::summary
?QuadratiK::summary
QuadratiK::summary()
QuadratiK::summary
showMethods(summary)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::load_all()
devtools::build_vignettes()
library(sphunif)
avail_cir_tests
install.packages("sphunif")
install.packages("sphunif")
library(sphunif)
?sph_stat_Poisson
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_manual()
cranlogs::cran_downloads()
cranlogs::cran_downloads("QuadratiK")
cranlogs::cran_downloads("QuadratiK", when = "last-month")
library(testthat)
# dimension = 2
dat<-rbind(matrix(rnorm(50),ncol=2),
matrix(rnorm(50,4),ncol=2),
matrix(rnorm(50,2),ncol=2))
y <- rep(c(1,2,3),each=25)
pkbd_res<- pkbc(dat, c(2,3))
expect_error(extract_stats(pkbd_res, 4),
"The provided pkbc object does not contain results for the requested
number of clusters")
extract_stats(pkbd_res, 4)
expect_error(extract_stats(pkbd_res, 4),
"The provided pkbc object does not contain results for the requested
number of clusters")
res1 <- extract_stats(pkbd_res, 3, true_label = NULL)
res1 <- extract_stats(pkbd_res, 3)
expect_equal(length(res1), 2)
# dimension = 3
dat<-rbind(matrix(rnorm(60),ncol=3),
matrix(rnorm(60,4),ncol=3),
matrix(rnorm(60,2),ncol=3))
y <- rep(c(1,2,3),each=20)
pkbd_res<- pkbc(dat, c(2,3))
res1 <- extract_stats(pkbd_res, 2)
res2 <- extract_stats(pkbd_res, 3)
expect_equal(length(res1), 3)
expect_equal(length(res2), 3)
# dimension = 4
dat<-rbind(matrix(rnorm(60),ncol=4),
matrix(rnorm(60,4),ncol=4),
matrix(rnorm(60,2),ncol=4))
y <- rep(c(1,2,3),each=15)
pkbd_res<- pkbc(dat, c(2,3))
res1 <- extract_stats(pkbd_res, 2)
res2 <- extract_stats(pkbd_res, 3)
expect_equal(length(res1), 4)
expect_equal(length(res2), 4)
library(autotest)
autotest_package()
library(srr)
srr_report()
srr_stats_pre_submit()
library(pkgcheck)
x <- pkgcheck()
x <- pkgcheck()
summary(x)
x
roxygen2::roxygenise()
summary(x)
roxygen2::roxygenise()
dat <- rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100,5),ncol=2))
#' res <- pkbc(dat,2:4)
dat <- rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100,5),ncol=2))
res <- pkbc(dat,2:4)
devtools::load_all()
dat <- rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100,5),ncol=2))
res <- pkbc(dat,2:4)
predict(res,3)
newdat <- rbind(matrix(rnorm(10),ncol=2),matrix(rnorm(10,5),ncol=2))
pr_res <- predict(res,2,newdat)
pr_res$Memb
roxygen2::roxygenise()
library(mclust)
devtools::document()
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_manual()
library(usethis)
use_pkgdown_github_pages()
?use_pkgdown_github_pages()
gh_token_help()
create_github_token("https://github.com/giovsaraceno")
?gitcreds::gitcreds_set()
gitcreds::gitcreds_set(url = "https://github.com/giovsaraceno")
use_pkgdown_github_pages()
gh_token_help()
vignette("package", package = "gitcreds")
gitcreds::gitcreds_set()
use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
gitcreds::gitcreds_set(url = "https://github.com/giovsaraceno/QuadratiK-package")
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
gh_token_help()
library(usethis)
gh_token_help()
edit_r_environ()
usethis::use_pkgdown_github_pages()
usethis::use_github_pages(branch = "gh-pages", path = "/", cname = NA)
usethis::use_github_pages(branch = "gh-pages", path = "/", cname = NA)
usethis::use_github_pages(branch = "gh-pages", path = "/", cname = NA)
usethis::use_pkgdown_github_pages()
usethis::use_github_pages(branch = "gh-pages", path = "/", cname = NA)
roxygen2::roxygenise()
usethis::use_github_pages(branch = "gh-pages", path = "/", cname = NA)
pkgload::dev_help('summary,pkbc-method')
usethis::use_github_pages(branch = "gh-pages", path = "/", cname = NA)
roxygen2::roxygenise()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown()
usethis::use_github_pages(branch = "gh-pages", path = "/docs", cname = NA)
devtools::document()
devtools::load_all()
devtools::build_manual()
