rm(list=ls())

### Code for creating some data sets to be used for testing that the R and the
### Python implementations gives the same results.

library(QuadratiK)
library(openxlsx)
library(sn)
library(ggplot2)
library(mvtnorm)
library(rgl)
library(GGally)

####### GENERATE DATA and perform the NORMALITY test
n <- 500
d <- 4
set.seed(2468)
dat_norm <- rmvnorm(n, sigma = diag(d))
file.name <- paste0("/Users/gsaracen/Box/KernelTest_implementation/paper_Materials/data_normality_paper.txt")
write.table(dat_norm, file.name, row.names=FALSE, col.names=FALSE)


h = 0.4
set.seed(2468)
system.time(norm_test <- kb.test(x=dat_norm, h=h, centering="Param"))
norm_test
summary_norm <- summary(norm_test)

####### GENERATE DATA and perform the k-SAMPLE test

sizes <- rep(200,3)
eps <- 1

set.seed(2468)
x1 <- rmvnorm(sizes[1], mean = c(0,sqrt(3)*eps/3))
x2 <- rmvnorm(sizes[2], mean = c(-eps/2,-sqrt(3)*eps/6))
x3 <- rmvnorm(sizes[3], mean = c(eps/2,-sqrt(3)*eps/6))
dat_k <- rbind(x1, x2, x3)
y_k <- as.factor(rep(c(1,2,3), times=sizes))

file.name <- paste0("/Users/gsaracen/Box/KernelTest_implementation/paper_Materials/data_ksample1_paper.txt")
write.table(cbind(dat_k,y_k), file.name, row.names=FALSE, col.names=FALSE)

h=1.5
set.seed(2468)
system.time(k_test <- kb.test(x=dat_k, y=y_k, h=h))
k_test
summary_ktest <- summary(k_test)
summary_ktest$summary_tables

####### GENERATE DATA and perform the two-SAMPLE test

n <- 200
d <- 4
skewness_y <- 0.5
set.seed(2468)
x_2 <- rmvnorm(n, mean = rep(0,d))
y_2 <- rmsn(n=n, xi=0, Omega = diag(d), alpha=rep(skewness_y,d))

file.name <- paste0("/Users/gsaracen/Box/KernelTest_implementation/paper_Materials/data_2sample1_paper.txt")
write.table(cbind(x_2,y_2), file.name, row.names=FALSE, col.names=FALSE)

h = 2
set.seed(2468)
system.time(two_test <- kb.test(x=x_2, y=y_2, h=h))
two_test
summary_two <- summary(two_test)
summary_two$summary_tables

####### GENERATE DATA and perform the test for uniformity on the Sphere

n <- 200
d <- 3
set.seed(2468)
z <- matrix(rnorm(n * d), n, d)
dat_sphere <- z/sqrt(rowSums(z^2))

file.name <- paste0("/Users/gsaracen/Box/KernelTest_implementation/paper_Materials/data_unif_paper.txt")
write.table(dat_sphere, file.name, row.names=FALSE, col.names=FALSE)

rho = 0.7
set.seed(2468)
system.time(res_unif <- pk.test(x=dat_sphere, rho=rho))
res_unif
summary_unif <- summary(res_unif)

####### Selection oh h
y <- as.numeric(y_k)
set.seed(2468)
time_h_k <- system.time( h_k <- select_h(dat_x=dat_k, dat_y=y, alternative="skewness"))
time_h_k
h_k$h_sel

set.seed(2468)
time_h_2 <- system.time( h_test2 <- select_h(dat_x=x_2, dat_y=y_2, alternative="location"))
time_h_2
h_test2$h_sel


####### Poisson kernel-based distribution

r_val <- c(seq(0.1,0.91,0.1),0.95)
time <- matrix(ncol=4)
i=1
for (r in r_val){
   cat(r, '\n')


   set.seed(2468+i)
   t1 <- system.time( dat1 <- rpkb(1000, rho=r, mu=c(0,0,1), method="rejvmf")$x)
   t2 <- system.time( dat2 <- rpkb(1000, rho=r, mu=c(0,0,1), method="rejacg")$x)
   t3 <- system.time( dat3 <- rpkb(1000, rho=r, mu=c(0,0,1), method="rejpsaw")$x)
   time <- rbind(time, c(r,t1[3],t2[3],t3[3]))

   i = i + 1
}
time <- time[-1,]
df <- data.frame(rho=rep(r_val,3),time= matrix(time[,2:4],ncol=1,byrow=FALSE), method= rep(c("rejvmf","rejacg","rejpsaw"),each=length(r_val)), colors = rep(c("red", "blue", "green"),each=length(r_val)))

custom_colors <- c("rejvmf" = "red", "rejacg" = "blue", "rejpsaw" = "green")
line_types <- c("rejvmf" = "dashed", "rejacg" = "solid", "rejpsaw" = "dotdash")

pl <- ggplot(df,aes(x=rho, y=time, group=method))+
   geom_line(aes(col=method, linetype = method),alpha=1, linewidth=1.2) +
   labs(x = expression(rho), y="Time (s)", col="Method") +
   theme_bw() +
   theme_minimal()+
   theme_light()+
   theme(legend.title = element_text(size=16),
         legend.text = element_text(size = 18),
         plot.title = element_text(size = 16),
         axis.title.x = element_text(size = 14),
         axis.title.y = element_text(size = 14),
         axis.text.x = element_text(size = 11),
         axis.text.y = element_text(size = 11)) +
   scale_color_manual(values = custom_colors) +
   scale_linetype_manual(values = line_types)

   #guides(color = "none")  # This hides the color legend
pl
ggsave(pl,filename = "/Users/gsaracen/Box/KernelTest_implementation/paper_Materials/time.pdf",width = 8,height = 4)


rho = 0.85
set.seed(2468)
dat1 <- rpkb(1000, rho=rho, mu=c(0,0,1), method="rejvmf")$x
dat2 <- rpkb(1000, rho=rho, mu=c(0,0,1), method="rejacg")$x
dat3 <- rpkb(1000, rho=rho, mu=c(0,0,1), method="rejpsaw")$x
x <- rbind(dat1, dat2, dat3)


# Legend information
classes = c("rejvmf", "rejacg", "rejpsaw")
colors = c("red", "blue", "green")
labels <- factor(rep(colors, each = 1000))
offset = 0.25
# Coordinates for legend placement
legend_x = max(x[,1]) + offset  # Choose appropriate values
legend_y = max(x[,2]) + offset
legend_z = seq(min(x[,3]), length.out = length(classes), by = offset)

open3d()
# Create the legend
for (i in seq_along(classes)) {
   text3d(legend_x, legend_y, legend_z[i], texts = classes[i], adj = c(0, 0.5))
   points3d(legend_x, legend_y, legend_z[i], col = colors[i], size = 5)
}
title3d("", line = 3, cex = 1.5, font=2, add=TRUE)
plot3d(x[,1], x[,2], x[,3], col = labels, size = 5, add=TRUE)
title3d("", line = 3, cex = 1.5, font=2, add=TRUE)
rgl.spheres(0 , col = "transparent", alpha = 0.2)

view3d(theta = 10, phi = -25, zoom = 0.5)
rgl.snapshot("/Users/gsaracen/Box/KernelTest_implementation/paper_Materials/rpkb_function.png")


#########################################
##
## wireless
##
#########################################

head(wireless)

wire <- wireless[,-8]
labels <- wireless[,8]
wire_norm <- wire/sqrt(rowSums(wire^2))

pl_or <- ggpairs(data.frame(wire), mapping = ggplot2::aes(color = factor(labels))) +
   scale_color_brewer(palette = "Set1") +
   theme_light(base_size = 7)
pl_or
pl_norm <- ggpairs(data.frame(wire_norm), mapping = ggplot2::aes(color = factor(labels))) +
   scale_color_brewer(palette = "Set1") +
   theme_light(base_size = 7)
pl_norm

set.seed(2468)
system.time(res_pk <- pkbc(as.matrix(wire_norm),2:10))

library(caret)
confusionMatrix(as.factor(res_pk@res_k[[4]]$finalMemb),as.factor(labels))
set.seed(2468)

res_validation <- validation(res_pk, true_label = rep(c(3,2,1,4), each=500))

res_validation$IGP
round(res_validation$metrics, 8)

summary_clust <- summary_stat(res_pk,4,true_label=labels)
summary_clust$metrics
rgl.snapshot("/Users/gsaracen/Box/KernelTest_implementation/paper_Materials/wireless_sphere.png")
